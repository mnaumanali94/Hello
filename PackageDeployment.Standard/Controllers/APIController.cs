/*
 * PackageDeployment.Standard
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io )
 */
using System;
using System.Collections.Generic;
using System.Dynamic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Newtonsoft.Json.Converters;
using PackageDeployment.Standard;
using PackageDeployment.Standard.Utilities;
using PackageDeployment.Standard.Http.Request;
using PackageDeployment.Standard.Http.Response;
using PackageDeployment.Standard.Http.Client;
using PackageDeployment.Standard.Exceptions;

namespace PackageDeployment.Standard.Controllers
{
    public partial class APIController: BaseController
    {
        #region Singleton Pattern

        //private static variables for the singleton pattern
        private static object syncObject = new object();
        private static APIController instance = null;

        /// <summary>
        /// Singleton pattern implementation
        /// </summary>
        internal static APIController Instance
        {
            get
            {
                lock (syncObject)
                {
                    if (null == instance)
                    {
                        instance = new APIController();
                    }
                }
                return instance;
            }
        }

        #endregion Singleton Pattern

        /// <summary>
        /// Used to publish package for supported languages
        /// </summary>
        /// <param name="language">Required parameter: Language whose SDK is to be published</param>
        /// <param name="apiDescription">Required parameter: API description for the SDK that needs to be  published</param>
        /// <param name="password">Required parameter: password of the  deployment account</param>
        /// <param name="email">Optional parameter: Email of the deployment account</param>
        /// <param name="username">Optional parameter: Username of Deployment account</param>
        /// <return>Returns the string response from the API call</return>
        public string CreatePublishPackage(
                string language,
                FileStreamInfo apiDescription,
                string password,
                string email = null,
                string username = null)
        {
            Task<string> t = CreatePublishPackageAsync(language, apiDescription, password, email, username);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Used to publish package for supported languages
        /// </summary>
        /// <param name="language">Required parameter: Language whose SDK is to be published</param>
        /// <param name="apiDescription">Required parameter: API description for the SDK that needs to be  published</param>
        /// <param name="password">Required parameter: password of the  deployment account</param>
        /// <param name="email">Optional parameter: Email of the deployment account</param>
        /// <param name="username">Optional parameter: Username of Deployment account</param>
        /// <return>Returns the string response from the API call</return>
        public async Task<string> CreatePublishPackageAsync(
                string language,
                FileStreamInfo apiDescription,
                string password,
                string email = null,
                string username = null)
        {
            //the base uri for api requests
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/api/deploy");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" }
            };

            //append form/field parameters
            var _fields = new List<KeyValuePair<string, Object>>()
            {
                new KeyValuePair<string, object>( "language", language ),
                new KeyValuePair<string, object>( "apiDescription", apiDescription),
                new KeyValuePair<string, object>( "password", password ),
                new KeyValuePair<string, object>( "email", email ),
                new KeyValuePair<string, object>( "username", username )
            };
            //remove null parameters
            _fields = _fields.Where(kvp => kvp.Value != null).ToList();

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Post(_queryUrl, _headers, _fields);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);

            //Error handling using HTTP status codes
            if (_response.StatusCode == 400)
                throw new BadRequestModelException(@"Bad Request", _context);

            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return _response.Body;
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

    }
} 